1. Создали наш проект go mod init websockets 
2. Создали базовый роут "/" который будет ссылаться на наш фронт шаблон
3. Создали шаблон с обработкой js, в том числе и с подключением стандартной js библиотеки для вебсокета по адресу /ws 
4. установили go get github.com/gorilla/websocket горилу вебсокет 
5. Создали новый роут на бек части /ws в котором у нас будет выполняться подключение к вебсокету.
6. В manager.go прокачали соединение до вебсокета и передали тестовые данные в функцию /ws на беке .
7. go run .\cmd\web запустит наш бинарник, при правильно подключенном вебсокете. 
8. создаем client.go - который будет содержать структуру нового клиента. И в менеджере исполняем логику по добавлению и 
удалению клиента. 
--- Чтение и запись сообщений. Подключение к вебсокету из пакета горилла фактически разрешает выполнять только одну одновременную
запись. Если кто-то решит рассылать спам или у нас будет масса клиентов отправляющих сообщения у нас возникнут проблемы. 
Но это можно предотвратить используя небуферизированный канал чтобы предотвратить одновременное получение слишком большого количества
прав на соединение. ---
9. Следующим шагом при добавлении клиента в clients.go мы хотим добавить две go рутины. Одна из них будет читать сообщения, другая 
будет писать сообщения. Создаем метод readMessage, который будет читать сообщение.
10. Теперь для того чтобы протестировать это мы идем на фронт энд в функцию sendMessage. и выведет conn.send(newmessage.value).
А также при успешном прочтении он выдаст нам в консоли на беке введенное сообщение и тип сообщения
11. Для того чтобы наш клиент не мог отправлять 100 сообщений подряд, мы хотим использовать небуферизированный канал , который 
будет блокировать любые одновременные записи, и вместо того чтобы идти в client.connection он будет идти в канал один за другим. 
12. создали writeMessages которая будет ждать приход данных от клиента в канал. И для теста в readMessages создали цикл который отправляет
отправленное с формы сообщение всем подключенным пользователям
        for wsclient := range c.manager.clients{
			wsclient.egress <- payload
		}
Вообщем сообщение приходит на форму отлавливается на фронте попадает в канал в readMessage и выводится с канала
в функции writeMessages		
13. conn.onmessage = function(m) {
                // Выв
                console.log(m);
            } - выведет объект типа MessageEvent с содержимым которые мы ввели в поле на фронте (оно будет value в ключе data)

14. Что делать если у нас есть две разные вещи:что делать если например мы хотим сменить комнату и отправить сообщение при этом?
Способ которым мы можем сделать это, это обернуть каждые входящие данные в тип Event, который подскажет нам что делать с этим сообщением
- создаем новый класс Event со свойствами type(тип поля от которого идет сообщение) и payload(исходящие данные) в js, 
именно его мы будем получать и отправлять через вебсокет. И два метода sendEvent и routeEvent (). routeEvent() - проверяет с какого
именно поля была отправленна форма и выводит сообщение в консоли разработчика , sendEvent() принимает данные конкретное название поля 
и сообщение. функция sendEvent далее уже применяется при взаимодействии с полем сообщения или же комнаты. Функция sendMessage 
срабатывает при при нажатии на кнопку submit, функция routeEvent при получении сообщения с вебсокета выводит определенную логику 
в консоли на фронте
15. С помощью функции sendMessage мы передали наши данные на бек, чтобы их там обработать. Теперь наша задача обработать данные 
пришедшие к нам с фронта, создаем файл event.go. Мы создали Event на фронт и бек части и теперь так как EventHandlerов у нас 
может быть очень много мы создаем дополнительное свойство в Manager с названием handlers ключом string и значением EventHanlder.
Через строку мы сможем получить доступ к определенному обработчику событий. Для того чтобы добавить обработчик событий мы используем
функцию setupEventHandlers и для проверки имеется ли у нас обработчик для определенного кейса (Event.type) у нас создается 
функция routeEvent. Также в структуре Client изменяем свойство Egress на Event. Изменяем функцию ReadMessage, которая будет 
преобразовывать входящий с фронта json в тип Event и writeMessages которая будет отправлять данные обратно.
16. Для проверки отправляем сообщение и оно должно вернуться у нас в network->websocket->messages


